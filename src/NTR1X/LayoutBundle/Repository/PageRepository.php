<?php

namespace NTR1X\LayoutBundle\Repository;

use NTR1X\LayoutBundle\Entity\Page;
use NTR1X\LayoutBundle\Entity\Source;
use NTR1X\LayoutBundle\Entity\Widget;
use NTR1X\LayoutBundle\Entity\Resource;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends \Doctrine\ORM\EntityRepository
{
    public function savePages($pages) {

        $em = $this->getEntityManager();
        foreach ($pages as $data) {
            $this->handlePage($em, $data);
        }
    }

    private function handlePage($em, $data) {

        if (isset($data['_action'])) {

            switch ($data['_action']) {
                case 'remove':
                    $this->handlePageRemove($em, $data);
                    break;
                case 'update':
                    $page = $this->handlePageUpdate($em, $data);
                    $this->handlePageTree($em, $page, $data);
                    break;
                case 'create':
                    $page = $this->handlePageCreate($em, $data);
                    $this->handlePageTree($em, $page, $data);
                    break;
            }

        } else {
            $page = $this->findOneById($data['id']);
            $this->handlePageTree($em, $page, $data);
        }
    }

    private function handlePageCreate($em, $data) {

        $page = (new Page())
            ->setName($data['name'])
            ->setTitle($data['title'])
            ->setMetas($this->clearParams($data['metas']))
            ->setResource(new Resource())
        ;

        $em->persist($page);
        $em->flush();

        $resource = $page->getResource();

        $resource
            ->setName("/pages/{$page->getId()}")
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($resource);
        $em->flush();

        return $page;
    }

    private function handlePageUpdate($em, $data) {

        $page = $this->findOneById($data['id'])
            ->setName($data['name'])
            ->setTitle($data['title'])
            ->setMetas($this->clearParams($data['metas']))
        ;

        $resource = $page->getResource();

        $resource
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($page);
        $em->flush();

        return $page;
    }

    private function handlePageRemove($em, $data) {

        $page = $this->findOneById($data['id']);

        $em->remove($page);
        $em->flush();
    }

    private function handlePageTree($em, $page, $data) {

        foreach ($data['sources'] as $source) {

            $this->handlePageSource($em, $page, $source);
        }

        foreach ($data['widgets'] as $widget) {

            $this->handlePageWidget($em, $page, $widget);
        }
    }

    private function handlePageSource($em, $page, $data) {

        if (isset($data['_action'])) {

            switch ($data['_action']) {
                case 'remove':
                    $this->handlePageSourceRemove($em, $page, $data);
                    break;
                case 'update':
                    $source = $this->handlePageSourceUpdate($em, $page, $data);
                    $this->handlePageSourceTree($em, $page, $source, $data);
                    break;
                case 'create':
                    $source = $this->handlePageSourceCreate($em, $page, $data);
                    $this->handlePageSourceTree($em, $page, $source, $data);
                    break;
            }

        } else {
            $source = $this->findOneById($data['id']);
            $this->handlePageSourceTree($em, $page, $source, $data);
        }
    }

    private function handlePageSourceCreate($em, $page, $data) {

        $source = (new Source())
            ->setName($data['name'])
            ->setPage($page)
            ->setUrl($data['url'])
            ->setMethod($data['method'])
            ->setParams($this->clearParams($data['params']))
        ;

        $em->persist($source);
        $em->flush();

        return $source;
    }

    private function handlePageSourceUpdate($em, $page, $data) {

        $source = $em->getRepository('NTR1XLayoutBundle:Source')->findOneById($data['id'])
            ->setName($data['name'])
            ->setUrl($data['url'])
            ->setMethod($data['method'])
            ->setParams($this->clearParams($data['params']))
        ;

        $em->persist($source);
        $em->flush();

        return $source;
    }

    private function handlePageSourceRemove($em, $page, $data) {

        $source = $em->getRepository('NTR1XLayoutBundle:Source')->findOneById($data['id']);

        $em->remove($source);
        $em->flush();
    }

    private function handlePageSourceTree($em, $page, $source, $data) {
    }

    private function handlePageWidget($em, $page, $data) {

        if (isset($data['_action'])) {

            switch ($data['_action']) {
                case 'remove':
                    $this->handlePageWidgetRemove($em, $page, $data);
                    break;
                case 'update':
                    $widget = $this->handlePageWidgetUpdate($em, $page, $data);
                    $this->handlePageWidgetTree($em, $page, $widget, $data);
                    break;
                case 'create':
                    $widget = $this->handlePageWidgetCreate($em, $page, $data);
                    $this->handlePageWidgetTree($em, $page, $widget, $data);
                    break;
            }

        } else {
            $widget = $this->findOneById($data['id']);
            $this->handlePageWidgetTree($em, $page, $widget, $data);
        }
    }

    private function handlePageWidgetCreate($em, $page, $data) {

        $widget = (new Widget())
            ->setPage($page)
            ->setType($data['type'])
            // TODO: Проверить/очистить
            ->setParams($data['params'])
            ->setResource(new Resource())
        ;

        $em->persist($widget);
        $em->flush();

        $resource = $widget->getResource();

        $resource
            ->setName("/widgets/{$widget->getId()}")
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($resource);
        $em->flush();

        return $widget;
    }

    private function handlePageWidgetUpdate($em, $page, $data) {

        $widget = $em->getRepository('NTR1XLayoutBundle:Widget')->findOneById($data['id'])
            ->setType($data['type'])
            ->setParams($data['params'])
        ;

        $resource = $widget->getResource();

        $resource
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($widget);
        $em->flush();

        return $widget;
    }

    private function handlePageWidgetRemove($em, $page, $data) {

        $widget = $em->getRepository('NTR1XLayoutBundle:Widget')->findOneById($data['id']);

        $em->remove($widget);
        $em->flush();
    }

    private function handlePageWidgetTree($em, $page, $source, $data) {
    }

    private function clearParams($data) {

        $array = [];

        foreach ($data as $param) {
            if (!isset($param['_action']) || $param['_action'] != 'remove') {
                $p = $param;
                unset($p['_action']);
                $array[] = $p;
            }
        }

        return $array;
    }
}
