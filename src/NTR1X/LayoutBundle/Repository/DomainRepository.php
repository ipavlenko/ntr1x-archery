<?php

namespace NTR1X\LayoutBundle\Repository;

use NTR1X\LayoutBundle\Entity\Domain;
use NTR1X\LayoutBundle\Entity\Resource;

/**
 * DomainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DomainRepository extends \Doctrine\ORM\EntityRepository
{
    public function saveDomains($domains) {

        $em = $this->getEntityManager();
        foreach ($domains as $data) {
            $this->handleDomain($em, $data);
        }
    }

    private function handleDomain($em, $data) {

        if (isset($data['_action'])) {

            switch ($data['_action']) {
                case 'remove':
                    $this->handleDomainRemove($em, $data);
                    break;
                case 'update':
                    $domain = $this->handleDomainUpdate($em, $data);
                    $this->handleDomainTree($em, $domain, $data);
                    break;
                case 'create':
                    $domain = $this->handleDomainCreate($em, $data);
                    $this->handleDomainTree($em, $domain, $data);
                    break;
            }

        } else {
            $domain = $this->findOneById($data['id']);
            $this->handleDomainTree($em, $domain, $data);
        }
    }

    private function handleDomainCreate($em, $data) {

        $domain = (new Domain())
            ->setName($data['name'])
            ->setTitle($data['title'])
            ->setResource(new Resource())
        ;

        $em->persist($domain);
        $em->flush();

        $resource = $domain->getResource();

        $resource
            ->setName("/domains/{$domain->getId()}")
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($resource);
        $em->flush();

        return $domain;
    }

    private function handleDomainUpdate($em, $data) {

        $domain = $this->findOneById($data['id'])
            ->setName($data['name'])
            ->setTitle($data['title'])
        ;

        $resource = $domain->getResource();

        $resource
            ->setParams($this->clearParams($data['resource']['params']))
        ;

        $em->persist($domain);
        $em->flush();

        return $domain;
    }

    private function handleDomainRemove($em, $data) {

        $domain = $this->findOneById($data['id']);

        $em->remove($domain);
        $em->flush();
    }

    private function handleDomainTree($em, $domain, $data) {
    }

    private function clearParams($data) {

        $array = [];

        foreach ($data as $param) {
            if (!isset($param['_action']) || $param['_action'] != 'remove') {
                $p = $param;
                unset($p['_action']);
                $array[] = $p;
            }
        }

        return $array;
    }
}
